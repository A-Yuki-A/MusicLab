# -*- coding: utf-8 -*-
"""music.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Dhu5AY8Ve8T-o8duZS8xO09g3A384gS
"""

# requirements.txt に以下を記載して再デプロイしてください:
# streamlit
# numpy
# pandas
# sounddevice
# librosa

import streamlit as st
import numpy as np
import pandas as pd
import time
import sounddevice as sd
import librosa
import tempfile

# アプリタイトル
st.title("音声波形表示とデジタル化プロセスのアニメーション")

# データ取得方法の選択
mode = st.radio(
    "音声データの取得方法を選択してください",
    ("既存ファイル (MP3)", "マイク録音")
)

data = None
sr = None

if mode == "既存ファイル (MP3)":
    uploaded_file = st.file_uploader("MP3ファイルをアップロードしてください", type=["mp3"])
    if uploaded_file:
        try:
            # 一時ファイルに保存して librosa で読み込み
            bytes_data = uploaded_file.read()
            tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".mp3")
            tmp.write(bytes_data)
            tmp.flush()
            data, sr = librosa.load(tmp.name, sr=None, mono=True)
        except Exception as e:
            st.error(f"MP3ファイルの読み込みに失敗しました: {e}")
            st.stop()

elif mode == "マイク録音":
    duration = st.slider("録音時間 (秒)", min_value=1, max_value=10, value=5)
    if st.button("録音開始"):
        st.info(f"録音中... {duration}秒")
        sr = 44100
        recording = sd.rec(int(duration * sr), samplerate=sr, channels=1, dtype='float32')
        sd.wait()
        data = recording.flatten()
        st.success("録音が完了しました！")

# データが取得できたら処理開始
if data is not None and sr is not None:
    # 時間軸
    t = np.arange(len(data)) / sr

    # 標本化周波数と量子化ビット数のスライダー
    fs = st.slider(
        "標本化周波数 (Hz)", min_value=1000, max_value=sr, value=int(sr/2), step=100
    )
    bits = st.slider("量子化ビット数", min_value=1, max_value=16, value=8)

    # 元波形表示
    df_orig = pd.DataFrame({"振幅": data}, index=t)
    st.line_chart(df_orig)

    # ダウンサンプリング（単純間引き）
    factor = max(int(sr / fs), 1)
    data_resampled = data[::factor]
    t_resampled = t[::factor]
    df_res = pd.DataFrame({"振幅 (標本点)": data_resampled}, index=t_resampled)
    st.line_chart(df_res)

    # デジタル化プロセス (最初の5標本点)
    max_val = np.max(np.abs(data_resampled))
    norm = data_resampled[:5] / max_val if max_val != 0 else data_resampled[:5]
    levels = 2 ** bits
    q = np.round((norm + 1) / 2 * (levels - 1)).astype(int)

    for i in range(5):
        st.write(f"--- ステップ {i+1} ---")
        st.write(f"時間: {t_resampled[i]:.4f} 秒")
        st.write(f"量子化前の値: {data_resampled[i]:.4f}")
        st.write(f"正規化値: {norm[i]:.4f}")
        st.write(f"量子化レベル: {q[i]} / {levels - 1}")
        binary = format(int(q[i]), f'0{bits}b')
        st.write(f"符号化 (2進数): {binary}")
        time.sleep(1)

    st.success("デジタル化プロセスのアニメーションが完了しました！")