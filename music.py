# -*- coding: utf-8 -*-
"""music.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12Dhu5AY8Ve8T-o8duZS8xO09g3A384gS
"""

# requirements.txt に以下を記載して再デプロイしてください:
# streamlit
# numpy
# pandas

import streamlit as st
import numpy as np
import pandas as pd
import wave
import io
import time

# アプリタイトル
st.title("音声波形表示とデジタル化プロセスのアニメーション")

# 音声ファイルアップロード（WAVのみ）
uploaded_file = st.file_uploader(
    "WAV形式の音声ファイルをアップロードしてください", type=["wav"]
)
if uploaded_file:
    try:
        # メモリ上のバイトデータを読み込む
        raw = uploaded_file.read()
        wf = wave.open(io.BytesIO(raw), "rb")
        sr = wf.getframerate()
        n_frames = wf.getnframes()
        audio_bytes = wf.readframes(n_frames)
    except Exception as e:
        st.error(f"WAVファイルの読み込みに失敗しました: {e}")
        st.stop()

    # 波形データ取得
    sampwidth = wf.getsampwidth()
    dtype = None
    if sampwidth == 1:
        dtype = np.uint8
    elif sampwidth == 2:
        dtype = np.int16
    elif sampwidth == 4:
        dtype = np.int32
    data = np.frombuffer(audio_bytes, dtype=dtype)
    # モノラル化 (ステレオの場合は左チャンネル)
    n_channels = wf.getnchannels()
    if n_channels > 1:
        data = data.reshape(-1, n_channels)[:, 0]

    # 時間軸を算出
    t = np.arange(len(data)) / sr

    # 標本化周波数と量子化ビット数のスライダー
    fs = st.slider(
        "標本化周波数 (Hz)", min_value=1000, max_value=sr, value=int(sr/2), step=100
    )
    bits = st.slider("量子化ビット数", min_value=1, max_value=16, value=8)

    # データフレーム作成して表示 (元波形)
    df_orig = pd.DataFrame({"振幅": data}, index=t)
    st.line_chart(df_orig)

    # ダウンサンプリング（単純間引き）
    factor = max(int(sr / fs), 1)
    data_resampled = data[::factor]
    t_resampled = t[::factor]
    df_res = pd.DataFrame({"振幅 (標本点)": data_resampled}, index=t_resampled)
    st.line_chart(df_res)

    # デジタル化プロセス (最初の5標本点)
    max_val = np.max(np.abs(data_resampled))
    norm = data_resampled[:5] / max_val if max_val != 0 else data_resampled[:5]
    levels = 2 ** bits
    q = np.round((norm + 1) / 2 * (levels - 1)).astype(int)

    for i in range(5):
        st.write(f"--- ステップ {i+1} ---")
        st.write(f"時間: {t_resampled[i]:.4f} 秒")
        st.write(f"量子化前の値: {data_resampled[i]}")
        st.write(f"正規化値: {norm[i]:.4f}")
        st.write(f"量子化レベル: {q[i]} / {levels - 1}")
        binary = format(int(q[i]), f'0{bits}b')
        st.write(f"符号化 (2進数): {binary}")
        time.sleep(1)

    st.success("デジタル化プロセスのアニメーションが完了しました！")